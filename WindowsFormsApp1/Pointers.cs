using System.Collections.Generic;
using System.Drawing;
using System.Net.NetworkInformation;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.ListView;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.ToolTip;

namespace SniperManagerApp
{
    class Pointers
    {
        public const string TEKKEN_WINDOW_NAME = "TEKKEN 7 ";
        public const string TEKKEN_EXE_NAME = "TekkenGame-Win64-Shipping";
        public const string STEAM_EXE_NAME = "steam";
        public const string PLAYERLIST_PATH = "Tekken Player List.txt";
        public const string TEKKEN_STEAM_APP_ID = "389730";

        public const string STEAM_API_MODULE_NAME = "steam_api64.dll";
        public const string STEAM_API_MODULE_EDITED_NAME = "steam_api64_o.dll";
        public const string TEKKEN_MODULE_NAME = "TekkenGame-Win64-Shipping.exe";
        public const string STEAM_MODULE_NAME = "steam.exe";
        public const string STEAM_APP_START = "steam://rungameid/";

        public const int SCREEN_MODE_FULLSCREEN = 0;
        public const int SCREEN_MODE_BORDERLESS = 1;
        public const int SCREEN_MODE_WINDOWED = 2;

        public static readonly string[] ALL_WATCHING_GAMES = { "Tekken 7"/*,"Tekken 8"*/ };
        public static readonly string[] ALL_CHARACTERS = { "Paul", "Law", "King", "Yoshimitsu", "Hwoarang", "Xiaoyu", "Jin", "Bryan", "Heihachi", "Kazuya", "Steve", "Jack-7", "Asuka", "Devil Jin", "Feng", "Lili", "Dragunov", "Leo", "Lars", "Alisa", "Claudio", "Katarina", "Lucky Chloe", "Shaheen", "Josie", "Gigas", "Kazumi", "Devil Kazumi", "Nina", "Master Raven", "Lee", "Bob", "Akuma", "Kuma", "Panda", "Eddy", "Eliza", "Miguel", "Soldier", "Kid Kazuya", "Jack-#", "Young Heihachi", "Dummy A", "Geese", "Noctis", "Anna", "Lei", "Marduk", "Armor King", "Julia", "Negan", "Zafina", "Ganryu", "Leroy", "Fahkumram", "Kunimitsu", "Lidia" };
        public static readonly string[] ALL_PLAYABLE_CHARACTERS = { "Akuma", "Alisa", "Anna", "Armor-King", "Asuka", "Bob", "Bryan", "Claudio", "Devil-jin", "Dragunov", "Eddy", "Eliza", "Fahkumram", "Feng", "Ganryu", "Geese", "Gigas", "Heihachi", "Hwoarang", "Jack-7", "Jin", "Josie", "Julia", "Katarina", "Kazumi", "Kazuya", "King", "Kuma", "Kunimitsu", "Lars", "Law", "Lee", "Lei", "Leo", "Leroy", "Lidia", "Lili", "Lucky-Chloe", "Marduk", "Master-Raven", "Miguel", "Negan", "Nina", "Noctis", "Panda", "Paul", "Shaheen", "Steve", "Xiaoyu", "Yoshimitsu", "Zafina" };
        public static readonly string[] ALL_RANKS = { "Beginner", "1st Kyu", "2nd Kyu", "3rd Kyu", "4th Kyu", "5th Kyu", "6th Kyu", "7th Kyu", "8th Kyu", "9th Kyu", "1st Dan", "2nd Dan", "3rd Dan", "Initiate", "Mentor", "Expert", "Grand master", "Brawler", "Marauder", "Fighter", "Vanguard", "Warrior", "Vindicator", "Juggernaut", "Usurper", "Vanquisher", "Destroyer", "Savior", "Overlord", "Genbu", "Byakko", "Seiryu", "Suzaku", "Mighty Ruler", "Revered Ruler", "Divine Ruler", "Eternal Ruler", "Fujin", "Raijin", "Yaksa", "Ryujin", "Emperor", "Tekken King", "Tekken God", "TTG", "TGP", "TGO" };
        public static readonly string[] ALL_PLAYABLE_RANKS = { "1st Dan", "2nd Dan", "3rd Dan", "Initiate", "Mentor", "Expert", "Grand master", "Brawler", "Marauder", "Fighter", "Vanguard", "Warrior", "Vindicator", "Juggernaut", "Usurper", "Vanquisher", "Destroyer", "Savior", "Overlord", "Genbu", "Byakko", "Seiryu", "Suzaku", "Mighty Ruler", "Revered Ruler", "Divine Ruler", "Eternal Ruler", "Fujin", "Raijin", "Yaksa", "Ryujin", "Emperor", "Tekken King", "Tekken God", "TTG", "TGP", "TGO" };
        public static readonly uint[] ALL_PLAYABLE_RANKS_MEMORY_IMPLIMENTATION = { 0xB83EEBB7, 0x067DD776, 0x5EFBAED1, 0xC0F75DB0, 0x83DD76F2, 0xFCEEBB73, 0x40BAEDCD, 0xF875DB8C, 0xA9EBB72F, 0x0DD76E6E, 0x61AEDCC9, 0xB65DB988, 0x39BB732B, 0x2076E66A, 0x1EEDCCE5, 0x7CDB99E4, 0xB9B733E7, 0x156E67C6, 0x68DCCFA1, 0x9CB99F60, 0x74733EE3, 0x83E67DC2, 0xECA40F9D, 0xD1481F5C, 0xAB903EDF, 0x79207DFE, 0xF840FB99, 0xD481F778, 0xAC03EE9B, 0x5A07DD5A, 0xBA0FBAD5, 0x441F75F4, 0x983EEB97, 0x267DD756, 0x7EFBAEF1, 0xE0F75D90, 0xDCEEBB53 };
        public static readonly Dictionary<string, uint> ALL_PLAYABLE_RANKS_MEMORY_IMPLIMENTATION2 = new Dictionary<string, uint> { { "1st Dan", 0xB83EEBB7 }, { "2nd Dan", 0x67DD776 }, { "3rd Dan", 0x5EFBAED1 }, { "Initiate", 0xC0F75DB0 }, { "Mentor", 0x83DD76F2 }, { "Expert", 0xFCEEBB73 }, { "Grand master", 0x40BAEDCD }, { "Brawler", 0xF875DB8C }, { "Marauder", 0xA9EBB72F }, { "Fighter", 0xDD76E6E }, { "Vanguard", 0x61AEDCC9 }, { "Warrior", 0xB65DB988 }, { "Vindicator", 0x39BB732B }, { "Juggernaut", 0x2076E66A }, { "Usurper", 0x1EEDCCE5 }, { "Vanquisher", 0x7CDB99E4 }, { "Destroyer", 0xB9B733E7 }, { "Savior", 0x156E67C6 }, { "Overlord", 0x68DCCFA1 }, { "Genbu", 0x9CB99F60 }, { "Byakko", 0x74733EE3 }, { "Seiryu", 0x83E67DC2 }, { "Suzaku", 0xECA40F9D }, { "Mighty Ruler", 0xD1481F5C }, { "Revered Ruler", 0xAB903EDF }, { "Divine Ruler", 0x79207DFE }, { "Eternal Ruler", 0xF840FB99 }, { "Fujin", 0xD481F778 }, { "Raijin", 0xAC03EE9B }, { "Yaksa", 0x5A07DD5A }, { "Ryujin", 0xBA0FBAD5 }, { "Emperor", 0x441F75F4 }, { "Tekken King", 0x983EEB97 }, { "Tekken God", 0x267DD756 }, { "TTG", 0x7EFBAEF1 }, { "TGP", 0xE0F75D90 }, { "TGO", 0xDCEEBB53 } };
        public static readonly Dictionary<string, int> CHARACTERINFO_MEMORY_OFFSETS = new Dictionary<string, int> { { "LOCALRANK", 0x4 }, { "MAXLOCALRANK", 0x8 }, { "RANK", 0x20 }, { "MAXRANK", 0x24 }, { "CURRENTELO",0x28},{ "RANKEDWINS", 0x6C },{ "RANKEDLOSE",0x70},{ "RANKEDDRAW", 0x74 }, { "WINSTREAK",0x78},{"ACRADAWINS",0x3C },{"ACRADALOSE",0x40 },{"ACRADADRAW", 0x44},{"TREASUREWINS",0x54 },{ "TREASURELOSE",0x58},{ "TREASUREDRAW",0x5C},{ "QUICKWINS",0x84},{ "QUICKLOSE",0x88},{ "QUICKDRAW",0x8C},{ "CUSTOMWINS",0x9C},{ "CUSTOMLOSE",0xA0},{ "CUSTOMDRAW",0xA4},{ "CUSTOMWINSTREAK",0xAC},{ "TURNAMETTOTAL",0xCC},{ "TURNAMETWINS",0xD0} };
        
        //78 - чтото связаное со стори модом и разлоченными видео
        //b4 - чтото связанное с победами (луз в кастомках или ничья)
        //b8 - то же
        //bc - то же
        //-8с - текущая игровая валюта 8 байт
        //-84 - всего игровой валюты

        public static readonly int CHARACTERINFO_MEMORY_BLOCK_SIZE = 0x28C;
        public static readonly int CHARACTERINFO_MEMORY_BLOCK_OFFSET = 0x84;

        public static readonly int PLAYERINFO_MEMORY_PROWIES_OFFSET = 0xC154;
        public static readonly int PLAYERINFO_MEMORY_LASTPLAYEDCHARACTER_OFFSET = 0xC0A4;
        public static readonly int PLAYERINFO_MEMORY_MATCHHISTORY_OFFSET = 0xA4;

        public static readonly Dictionary<uint, uint> CHARACTERINFO_MEMORY_KNOWEDDECUMALS = new Dictionary<uint, uint> { { 0, 0xCCA40FBD }, { 1, 0xF1481F7C }, { 2, 0x8B903EFF }, { 4, 0xD840FBB9 }, { 5, 0xF481F758 }, {6, 0x8C03EEBB }, { 7, 0x7A07DD7A }, { 8, 0x9AFBAF5 }, { 10, 0xB83EEBB7 }, {11, 0x067DD776 }, { 12, 0x5EFBAED1 }, { 15, 0x83DD76F2 }, { 16, 0x40BAEDCD }, { 22, 0x39BB732B }, { 34, 0xAB903EDF }, { 37, 0xD0EDC225 }, { 43, 0x267DD756 }, { 44, 0x7EFBAEF1 }, { 46, 0xDCEEBB53 }, { 47, 0xA3DD76D2 },{ 48, 0x63198222 }, { 49, 0xD875DBAC }, { 50, 0x89EBB70F }, { 52, 0x41AEDCE9 },{ 58, 0x99B733C7 }, { 101, 0x9481F738 }, { 105, 0x041F75B4 }, { 106, 0xD83EEBD7 }, { 107, 0x667DD716 }, { 108, 0x3EFBAEB1 }, { 109, 0xA0F75DD0 },{ 137, 0xE41F7554 }, { 144, 0xC0BAED4D }, { 145, 0x07875DBC }, { 197, 0x3481F798 }, { 200, 0x5A0FBA35 }, { 207,0x43DD7632 }, { 212, 0xA1AEDC09 }, { 213, 0x765DB948 }, {214, 0xF9BB73EB }, { 215, 0xE076E6AA }, { 216, 0xDEEDCC25 },{ 217, 0xBCDB9924 }, { 1850, 0x9EB734C7 }, { 2067 , 0x05D7666E }, { 2500, 0x1140F279 }, { 3917, 0xEB75BBFF }, { 4150, 0x09BB630B }, { 7000, 0x45EDD7A5 }, { 7250, 0xF5EBAB6F }, { 20014, 0x92EEF553 }, { 31642, 0x42B74867 }, { 34821, 0x7C817F58 }, { 34861, 0x68F7D590 }, { 49198, 0x1CEE7B53 }, { 56578, 0x5690E3FF }, { 58414, 0x38EE5F53 }, { 60929, 0x1F48F17C }, { 100000, 0x84E7FB42 }, { 200014, 0x92EEF553 }, { 200017, 0x967595AC }, { 500000, 0x23DF082E } };

        public static readonly byte[] CHARACTERS_PRESETS_JOSIE = { 0x00, 0x00, 0x00, 0xC2, 0x7D, 0xE6, 0x83, 0xC2, 0x7D, 0xE6, 0x83, 0x6B, 0x51, 0xBB, 0x5B, 0xBB, 0xEE, 0x03, 0x8C, 0xBD, 0x0F, 0xA4, 0xCC, 0xBD, 0x0F, 0xA4, 0xCC, 0xBD, 0x0F, 0xC4, 0x06, 0x9D, 0x0F, 0xA4, 0xEC, 0x9D, 0x0F, 0xA4, 0xEC, 0xA5, 0xD7, 0xED, 0x45, 0xBD, 0x0F, 0xA4, 0xCC, 0xBD, 0x0F, 0xA4, 0xCC, 0xBD, 0x0F, 0xA4, 0xCC, 0x7C, 0x1F, 0x18, 0xCB, 0xBD, 0x0F, 0xA4, 0xCC, 0xBD, 0x0F, 0xA4, 0xCC, 0xBD, 0x0F, 0xA4, 0xCC, 0xBD, 0x0F, 0xA4, 0xCC, 0xBD, 0x0F, 0xA4, 0xCC, 0xBD, 0x0F, 0xA4, 0xCC, 0x54, 0x75, 0x1F, 0xE4, 0xD1, 0xAE, 0xFB, 0x5E, 0xBD, 0x0F, 0xA4, 0xCC, 0xB9, 0xFB, 0x40, 0xD8, 0x60, 0x9F, 0xB9, 0x9C, 0xBD, 0x0F, 0xA4, 0xCC, 0xB4, 0x75, 0x1F, 0x04, 0xDF, 0x3E, 0x90, 0xAB, 0xBD, 0x0F, 0xA4, 0xCC, 0xBB, 0xEE, 0x03, 0x8C, 0x88, 0xB9, 0x5D, 0xB6, 0xBD, 0x0F, 0xA4, 0xCC, 0x7C, 0x1F, 0x48, 0xF1, 0xBD, 0x0F, 0xA4, 0xCC, 0xBD, 0x0F, 0xA4, 0xCC, 0x7C, 0x1F, 0x48, 0xF1, 0x7C, 0x1F, 0x48, 0xF1, 0xBD, 0x0F, 0xA4, 0xCC, 0xBD, 0x0F, 0xA4, 0xCC, 0xBD, 0x0F, 0xA4, 0xCC, 0xBD, 0x0F, 0xA4, 0xCC, 0xBD, 0x0F, 0xA4, 0xCC, 0xBD, 0x0F, 0xA4, 0xCC, 0xBD, 0x0F, 0xA4, 0xCC, 0xBD, 0x0F, 0xA4, 0xCC, 0xBD, 0x0F, 0xA4, 0xCC, 0xBD, 0x0F, 0xA4, 0xCC, 0xBD, 0x0F, 0xA4, 0xCC, 0xBD, 0x0F, 0xA4, 0xCC, 0xBD, 0x0F, 0xA4, 0xCC, 0xBD, 0x0F, 0xA4, 0xCC, 0xBD, 0x0F, 0xA4, 0xCC, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x21, 0x65, 0xDF, 0x41, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE6, 0xFF, 0x00, 0x00, 0xE6, 0xFF, 0x00, 0x00, 0xE6, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xF4, 0xF4, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x42, 0x3D, 0x92, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE6, 0xFF, 0x00, 0x00, 0xE6, 0xFF, 0x14, 0x14, 0x14, 0xFF, 0x14, 0x14, 0x14, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0xD4, 0x23, 0x53, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x14, 0x14, 0xFF, 0x00, 0x00, 0xE6, 0xFF, 0x08, 0x01, 0x07, 0xFF, 0x00, 0x00, 0xE6, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xD4, 0xDF, 0x1C, 0xAC, 0xBD, 0x0F, 0xA4, 0x80, 0xBD, 0x0F, 0xA4, 0x80, 0x91, 0x04, 0xF8, 0xDC, 0xBD, 0x0F, 0xA4, 0x80, 0xBD, 0x0F, 0xA4, 0x80, 0xAE, 0xC4, 0xD4, 0x39, 0x1C, 0x16, 0x48, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBD, 0x0F, 0xA4, 0xCC, 0x00, 0x00, 0x00, 0x00 };
        // steam id of the opponent
        public static readonly long STEAM_ID_BETTER_STATIC_POINTER = 0x2FC50;  //to get the real static pointer: needs to be added to the module name, example: "steam_api64_o.dll"+2FC50
        public static readonly int[] STEAM_ID_BETTER_POINTER_OFFSETS = { 8, 0x10, 0, 0x10, 0x28, 0x88, 0 };

        // steam id of the user
        public static readonly long STEAM_ID_USER_STATIC_POINTER = 0x2FF78;  //to get the real static pointer: needs to be added to the module name, example: "steam_api64_o.dll"+2FC50
        public static readonly int[] STEAM_ID_USER_POINTER_OFFSETS = { };

        // steam name of opponent after having accepted
        public static readonly long OPPONENT_STRUCT_NAME_STATIC_POINTER = 0x34D55A0;  //to get the real static pointer: needs to be added to the module name
        public static readonly int[] OPPONENT_STRUCT_NAME_POINTER_OFFSETS = { 0, 0x8, 0x11C };

        // character of opponent after having accepted
        public static readonly long OPPONENT_STRUCT_CHARACTER_STATIC_POINTER = 0x34D55A0;  //to get the real static pointer: needs to be added to the module name
        public static readonly int[] OPPONENT_STRUCT_CHARACTER_POINTER_OFFSETS = { 0, 0x8, 0x10 };

        public static readonly long SCREEN_MODE_STATIC_POINTER = 0x347DED8;  //to get the real static pointer: needs to be added to the module name
        public static readonly int[] SCREEN_MODE_POINTER_OFFSETS = { };

        public static readonly long SECONDS_REMAINING_MESSAGE_STATIC_POINTER = 0x34CE9E0;  //to get the real static pointer: needs to be added to the module name
        public static readonly int[] SECONDS_REMAINING_MESSAGE_POINTER_OFFSETS = { 0x58, 0x330, 0xC8, 0x30, 0x30, 0xF18 };

        public static readonly long PLAYER_NAME_STATIC_POINTER = 0x34CDF90;
        public static readonly int[] PLAYER_NAME_POINTER_OFFSETS = { 0x10, 0x78, 0x10, 0x38, 0x0, 0x0, 0x11C };
        public static readonly int[] PLAYER_SEGMENT_POINTER_OFFSETS = { 0x10, 0x78, 0x10, 0x38, 0x0, 0x0, 0x0 };

        public static readonly long PLAYER_SUBSTITUTION_CHARACTER_POINTER = 0x034D0258;
        public static readonly int[] PLAYER_SUBSTITUTION_CHARACTER_OFFSET = { 0x11C/*, 0xCE4*/ };
    }
}



